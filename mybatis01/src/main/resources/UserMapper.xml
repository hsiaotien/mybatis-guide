<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- namespace: 指定当前mapper文件的唯一标识 -->
<mapper namespace="com.dev.mapper.UserMapper">

	<!-- type: map最终查询返回的具体类型 -->
	<!-- id: 唯一标识 -->
	<resultMap type="User" id="userMap" autoMapping="true">
		<id column="id" property="id"/>
		<!-- <result column="user_name" property="userName"/> -->
	</resultMap>
	
	
	<!-- sql片段 -->
<!-- 	<sql id="commonSql">
		id,
		user_name,
		password,
		name,
		age,
		sex,
		birthday,
		created,
		updated
	</sql> -->



	<!-- id: 当前文件下,语句的唯一标识 -->
	<!-- resultType: 结果集封装的实体类型 -->
	<!-- 传递的参数类型,要方法中的参数一致,可以省略 -->
	<select id="selectUserById"  resultMap="userMap" parameterType="Long">
		select  <include refid="CommonSQL.commonSql" />  from tb_user
		where id = #{aa}
	</select>

	<select id="selectAllUser" resultType="User" >
		select *  from tb_user
	</select>
	<!-- parameterType:接受的参数类型,可以省略 -->
	<!-- useGeneratedKeys:主键回写
		keyColumn:指定表中的主键列
		keyProperty: 指定pojo中主键对应的属性
	 -->
	<insert id="insertUser" useGeneratedKeys="true"
			keyColumn="id" keyProperty="id" parameterType="com.dev.pojo.User">
		INSERT INTO
		mybatis_test.tb_user (
		user_name,
		password,
		name,
		age,
		sex,
		birthday,
		created,
		updated
		)
		VALUES
		(
		#{userName},
		#{password},
		#{name},
		#{age},
		#{sex},
		#{birthday},
		now(),
		now()
		);

	</insert>

	<update id="updateUser">
	
		UPDATE mybatis_test.tb_user
		set user_name = #{userName},
		password = #{password},
		name = #{name},
		age = #{age},
		sex = #{sex},
		birthday = #{birthday},
		updated = now()
		WHERE
		(id = #{id});


	</update>
	
	<delete id="deleteUserById">
	
		delete from tb_user where id  = #{id}
	</delete>
	
	
	
	<!-- 根据表名查询用户信息 -->
	<select id="selectUserByTableName" resultType="User">
		select * from ${tableName}
	</select>
	
	
	<select id="login" resultType="User">
		select *from tb_user where user_name = #{userName}	and password = #{password}
	</select>
	
	
	<select id="loginMap" resultType="User">
		select *from tb_user where user_name = #{userName}	and password = #{password}
	</select>
	
	
	<!-- 用户名模糊查询用户信息 -->
	<select id="selectUserByNameLike" resultType="User">
		select  * from tb_user where user_name like '%${userName}%'
	</select>
	
	<!-- 查询男性用户,如果输入了用户名,就根据用户名模糊查询男性用户 -->
	<select id="selectUserBySexAndNameLike" resultType="User">
	
		select * from tb_user where sex = 1
		<!-- test:ognl表达式:判断条件 -->
		<if test="userName!=null and userName.trim()!=''">
			and user_name like '%' #{userName} '%'
		</if>
	</select>
	
	<!-- 查询男性用户，如果输入了用户名则按照用户名模糊查找，否则如果输入了年龄则按照年龄查找，否则查找用户名为“zhangsan”的用户。 -->
	
	<select id="selectUserBySexAndUserNameLikeOrAge" resultType="User">
		select * from tb_user where sex = 1
		<choose>
			<when test="userName != null and userName.trim()!=''"> and user_name like  '%' #{userName} '%'</when>
			<when test="age != null"> and age = #{age} </when>
			<otherwise> and user_name = 'zhangsan' </otherwise>		
		</choose>
			
	</select>
	
	<!-- //查询所有用户，如果输入了用户名按照用户名进行模糊查询，如果输入年龄，按照年龄进行查询，如果两者都输入，两个条件都要成立。 -->
	<select id="selectUsersByUserNameLikeAndAge" resultType="User">
		select * from tb_user
		<where>
			<if test="userName != null and userName.trim()!=''"> user_name like '%' #{userName} '%' </if>		
			<if test="age !=null"> and age = #{age} </if>		
		</where>
	</select>
	
	<update id="updateSelectvice" >
		UPDATE mybatis.tb_user 
		<set>
				<if test="userName != null and userName.trim()!=''">user_name = #{userName},</if>
				<if test="password != null and password.trim()!=''">password = #{password},</if>
				<if test="name != null and name.trim()!=''">name = #{name},</if>
				<if test="age != null ">age = #{age},</if>
				<if test="sex != null ">sex = #{sex},</if>
				<if test="birthday != null ">birthday = #{birthday},</if>
			updated = now(),
		</set>
		WHERE
		(id = #{id});
	</update>
	
	
	<!-- 根据多个id查询用户 -->
	<select id="selectUsersByIds" resultType="User">
		SELECT
			*
		FROM
			tb_user
		WHERE
			id IN  
			<foreach collection="ids" item="id" separator="," open="(" close=")">#{id}</foreach>
			 
	</select>

</mapper>